{"version":3,"sources":["utils/mutations.js","utils/localStorage.js","utils/auth.js","pages/SearchBooks.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","removeBookId","bookId","savedBookIds","localStorage","getItem","JSON","parse","updatedSavedBookIds","filter","savedBookId","setItem","stringify","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","idToken","window","location","assign","removeItem","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","error","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","data","log","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","savedId","onClick","QUERY_ME","SavedBooks","useQuery","loading","removeBook","userData","me","handleDeleteBook","username","savedBooks","SignupForm","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39915ce3.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n  mutation saveBook($bookData: BookInput!) {\n    saveBook(bookData: $bookData) {\n      _id\n      username\n      email\n      savedBooks {\n        bookId\n        authors\n        image\n        description\n        title\n        link\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BOOK = gql`\n  mutation removeBook($bookId: ID!) {\n    removeBook(bookId: $bookId) {\n      _id\n      username\n      email\n      savedBooks {\n        bookId\n        authors\n        image\n        description\n        title\n        link\n      }\n    }\n  }\n`;\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState, useEffect } from 'react';\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nimport Auth from '../utils/auth';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=${searchInput}`\n      );\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveBook({\n        variables: { bookData: { ...bookToSave } },\n      });\n      console.log(savedBookIds);\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedId) => savedId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some((savedId) => savedId === book.bookId)\n                        ? 'Book Already Saved!'\n                        : 'Save This Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      savedBooks {\n        bookId\n        authors\n        image\n        description\n        title\n        link\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from 'react-bootstrap';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport { removeBookId } from '../utils/localStorage';\n\nimport Auth from '../utils/auth';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(QUERY_ME);\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n\n  const userData = data?.me || {};\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeBook({\n        variables: { bookId },\n      });\n\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing {userData.username}'s books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks?.length\n            ? `Viewing ${userData.savedBooks.length} saved ${\n                userData.savedBooks.length === 1 ? 'book' : 'books'\n              }:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks?.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n  });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n      console.log(data);\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for commen\nimport React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      console.log(data);\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setUserFormData({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Routes>\n            <Route \n              path=\"/\" \n              element={<SearchBooks />} \n            />\n            <Route \n              path=\"/saved\" \n              element={<SavedBooks />} \n            />\n            <Route \n              path=\"*\" \n              element={<h1 className=\"display-2\">Wrong page!</h1>} \n            />\n          </Routes>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}